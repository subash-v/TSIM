{"ast":null,"code":"var _jsxFileName = \"/home/hemant/TSIM/react-frontend/src/components/general/SearchAndUpdate.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./SearchAndUpdate.css\";\nimport Icon from \"../../core/Icon\";\nimport ControlInput from \"../../core/ControlInput\";\nexport default class SearchAndUpdate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pinCode: this.props.value,\n      errorMessage: null\n    };\n  }\n\n  getValue(pinCode) {\n    const pin = pinCode.replace(/\\D/g, \"\");\n\n    if (pinCode.length <= 6) {\n      this.setState({\n        pinCode: pin\n      });\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(pin);\n    }\n  }\n\n  handleOnFocusInput(event) {\n    if (this.props.onFocusInput) {\n      this.props.onFocusInput(event);\n    }\n  }\n\n  handleBlurInput() {\n    if (this.props.onBlur) {\n      this.props.onBlur();\n    }\n\n    this.onUpdate();\n  }\n\n  handleKeyUp(event) {\n    if (event.key === \"Go\" || event.key === \"Enter\") {\n      this.onUpdate();\n    }\n  }\n\n  onUpdate() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: styles.base,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.inputSearchHolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.inputHolder,\n      style: {\n        width: this.props.width\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" \", React.createElement(ControlInput, {\n      boxy: this.props.uiType === \"default\" ? true : false,\n      hollow: this.props.uiType === \"hollow\" ? true : false,\n      id: this.props.id,\n      value: this.state.pinCode,\n      placeholder: this.props.placeholder,\n      onChange: val => this.getValue(val),\n      textStyle: {\n        fontSize: 14\n      },\n      height: 35,\n      autoFocus: this.props.hasAutoFocus,\n      rightChildSize: 35,\n      borderColor: this.props.borderColor,\n      borderBottom: this.props.borderBottom,\n      onFocus: event => {\n        this.handleOnFocusInput(event);\n      },\n      onBlur: () => {\n        this.handleBlurInput();\n      },\n      onKeyUp: event => {\n        this.handleKeyUp(event);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: styles.buttonHolder,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: styles.buttonCover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, this.props.iconImage && React.createElement(\"div\", {\n      className: styles.imageCover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      image: this.props.iconImage,\n      size: \"20px\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), this.props.iconText && React.createElement(\"div\", {\n      className: styles.buttonCover,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.props.iconText)))));\n  }\n\n}\nSearchAndUpdate.propTypes = {\n  placeholder: PropTypes.string\n};\nSearchAndUpdate.defaultProps = {\n  placeholder: \"search\"\n};","map":{"version":3,"sources":["/home/hemant/TSIM/react-frontend/src/components/general/SearchAndUpdate.js"],"names":["React","PropTypes","styles","Icon","ControlInput","SearchAndUpdate","Component","constructor","props","state","pinCode","value","errorMessage","getValue","pin","replace","length","setState","onChange","handleOnFocusInput","event","onFocusInput","handleBlurInput","onBlur","onUpdate","handleKeyUp","key","render","base","inputSearchHolder","inputHolder","width","uiType","id","placeholder","val","fontSize","hasAutoFocus","borderColor","borderBottom","buttonHolder","buttonCover","iconImage","imageCover","iconText","propTypes","string","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./SearchAndUpdate.css\";\nimport Icon from \"../../core/Icon\";\nimport ControlInput from \"../../core/ControlInput\";\nexport default class SearchAndUpdate extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      pinCode: this.props.value,\n      errorMessage: null\n    };\n  }\n  getValue(pinCode) {\n    const pin = pinCode.replace(/\\D/g, \"\");\n    if (pinCode.length <= 6) {\n      this.setState({ pinCode: pin });\n    }\n    if (this.props.onChange) {\n      this.props.onChange(pin);\n    }\n  }\n  handleOnFocusInput(event) {\n    if (this.props.onFocusInput) {\n      this.props.onFocusInput(event);\n    }\n  }\n\n  handleBlurInput() {\n    if (this.props.onBlur) {\n      this.props.onBlur();\n    }\n    this.onUpdate();\n  }\n\n  handleKeyUp(event) {\n    if (event.key === \"Go\" || event.key === \"Enter\") {\n      this.onUpdate();\n    }\n  }\n  onUpdate() {}\n  render() {\n    return (\n      <div className={styles.base}>\n        <div className={styles.inputSearchHolder}>\n          <div\n            className={styles.inputHolder}\n            style={{ width: this.props.width }}\n          >\n            {\" \"}\n            <ControlInput\n              boxy={this.props.uiType === \"default\" ? true : false}\n              hollow={this.props.uiType === \"hollow\" ? true : false}\n              id={this.props.id}\n              value={this.state.pinCode}\n              placeholder={this.props.placeholder}\n              onChange={val => this.getValue(val)}\n              textStyle={{ fontSize: 14 }}\n              height={35}\n              autoFocus={this.props.hasAutoFocus}\n              rightChildSize={35}\n              borderColor={this.props.borderColor}\n              borderBottom={this.props.borderBottom}\n              onFocus={event => {\n                this.handleOnFocusInput(event);\n              }}\n              onBlur={() => {\n                this.handleBlurInput();\n              }}\n              onKeyUp={event => {\n                this.handleKeyUp(event);\n              }}\n            />\n          </div>\n          <div className={styles.buttonHolder}>\n            <div className={styles.buttonCover}>\n              {this.props.iconImage && (\n                <div className={styles.imageCover}>\n                <Icon image={this.props.iconImage} size={\"20px\"}></Icon>\n              </div>\n              )}\n              {this.props.iconText && (\n                <div className={styles.buttonCover} >{this.props.iconText}</div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nSearchAndUpdate.propTypes = {\n  placeholder: PropTypes.string\n};\n\nSearchAndUpdate.defaultProps = {\n  placeholder: \"search\"\n};\n"]},"metadata":{},"sourceType":"module"}