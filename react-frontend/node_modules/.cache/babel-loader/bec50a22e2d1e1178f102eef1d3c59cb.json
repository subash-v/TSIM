{"ast":null,"code":"import _defineProperty from \"/home/hemant/TSIM/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/hemant/TSIM/react-frontend/src/core/ControlInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport styles from \"./Input2.css\";\nimport PropTypes from \"prop-types\";\nexport default class ControlInput extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleKeyUp = event => {\n      if (this.props.onKeyUp) {\n        this.props.onKeyUp(event);\n      }\n    };\n  }\n\n  handleFocus(event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n  }\n\n  handleBlur(event) {\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n  }\n\n  handleChange(event) {\n    if (this.props.onChange) {\n      this.props.onChange(event.target.value);\n    }\n  }\n\n  handleKeyPress(event) {\n    if (this.props.onKeyPress) {\n      this.props.onKeyPress(event);\n    }\n  }\n\n  render() {\n    let className = styles.base;\n\n    if (this.props.isWhite) {\n      className = styles.whiteHollow;\n    }\n\n    if (this.props.isWhite && this.props.boxy) {\n      className = styles.whiteBox;\n    }\n\n    return React.createElement(\"div\", {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: this.props.focused ? styles.focused : styles.wrapper,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: this.props.hollow ? styles.hollow : styles.box,\n      style: {\n        paddingLeft: \"\".concat(this.props.leftChildSize - 10, \"px\"),\n        paddingRight: \"\".concat(this.props.rightChildSize - 10, \"px\"),\n        height: \"\".concat(this.props.height, \"px\"),\n        borderColor: \"\".concat(this.props.borderColor),\n        borderBottom: \"\".concat(this.props.borderBottom),\n        background: \"\".concat(this.props.background)\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: this.props.type,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      id: this.props.id,\n      placeholder: this.props.placeholder,\n      className: styles.inputBox,\n      onFocus: event => this.handleFocus(event),\n      onBlur: event => this.handleBlur(event),\n      onChange: event => this.handleChange(event),\n      style: _objectSpread({}, this.props.textStyle),\n      onKeyUp: event => this.handleKeyUp(event),\n      value: this.props.value ? this.props.value : \"\",\n      maxLength: this.props.maxLength,\n      disabled: this.props.disabled,\n      autoFocus: this.props.autoFocus,\n      onKeyPress: event => this.handleKeyPress(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    })), this.props.leftChild && React.createElement(\"div\", {\n      className: styles.boxIconLeft,\n      style: {\n        width: this.props.leftChildSize\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, this.props.leftChild), this.props.rightChild && React.createElement(\"div\", {\n      className: styles.boxIconRight,\n      style: {\n        width: this.props.rightChildSize\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.props.rightChild)));\n  }\n\n}\nControlInput.propTypes = {\n  id: PropTypes.string,\n  hollow: PropTypes.bool,\n  boxy: PropTypes.bool,\n  type: PropTypes.string,\n  leftChild: PropTypes.element,\n  rightChild: PropTypes.element,\n  isWhite: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  height: PropTypes.number,\n  background: PropTypes.string,\n  textStyle: PropTypes.shape({\n    fontSize: PropTypes.number\n  })\n};\nControlInput.defaultProps = {\n  id: null,\n  height: 40,\n  type: \"text\",\n  textStyle: {\n    fontSize: 14\n  },\n  disabled: false,\n  borderBottom: \"1px solid #d2d2d2\"\n};","map":{"version":3,"sources":["/home/hemant/TSIM/react-frontend/src/core/ControlInput.js"],"names":["React","styles","PropTypes","ControlInput","Component","handleKeyUp","event","props","onKeyUp","handleFocus","onFocus","handleBlur","onBlur","handleChange","onChange","target","value","handleKeyPress","onKeyPress","render","className","base","isWhite","whiteHollow","boxy","whiteBox","focused","wrapper","hollow","box","paddingLeft","leftChildSize","paddingRight","rightChildSize","height","borderColor","borderBottom","background","type","id","placeholder","inputBox","textStyle","maxLength","disabled","autoFocus","leftChild","boxIconLeft","width","rightChild","boxIconRight","propTypes","string","bool","element","func","number","shape","fontSize","defaultProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styles from \"./Input2.css\";\nimport PropTypes from \"prop-types\";\nexport default class ControlInput extends React.Component {\n  handleFocus(event) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n  }\n  handleBlur(event) {\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n  }\n  handleChange(event) {\n    if (this.props.onChange) {\n      this.props.onChange(event.target.value);\n    }\n  }\n  handleKeyPress(event) {\n    if (this.props.onKeyPress) {\n      this.props.onKeyPress(event);\n    }\n  }\n  handleKeyUp = event => {\n    if (this.props.onKeyUp) {\n      this.props.onKeyUp(event);\n    }\n  };\n\n  render() {\n    let className = styles.base;\n    if (this.props.isWhite) {\n      className = styles.whiteHollow;\n    }\n    if (this.props.isWhite && this.props.boxy) {\n      className = styles.whiteBox;\n    }\n    return (\n      <div className={className}>\n        <div className={this.props.focused ? styles.focused : styles.wrapper}>\n          <div\n            className={this.props.hollow ? styles.hollow : styles.box}\n            style={{\n              paddingLeft: `${this.props.leftChildSize - 10}px`,\n              paddingRight: `${this.props.rightChildSize - 10}px`,\n              height: `${this.props.height}px`,\n              borderColor: `${this.props.borderColor}`,\n              borderBottom: `${this.props.borderBottom}`,\n              background: `${this.props.background}`\n            }}\n          >\n            <input\n              type={this.props.type}\n              autoComplete=\"off\"\n              autoCorrect=\"off\"\n              id={this.props.id}\n              placeholder={this.props.placeholder}\n              className={styles.inputBox}\n              onFocus={event => this.handleFocus(event)}\n              onBlur={event => this.handleBlur(event)}\n              onChange={event => this.handleChange(event)}\n              style={{ ...this.props.textStyle }}\n              onKeyUp={event => this.handleKeyUp(event)}\n              value={this.props.value ? this.props.value : \"\"}\n              maxLength={this.props.maxLength}\n              disabled={this.props.disabled}\n              autoFocus={this.props.autoFocus}\n              onKeyPress={event => this.handleKeyPress(event)}\n            />\n          </div>\n          {this.props.leftChild && (\n            <div\n              className={styles.boxIconLeft}\n              style={{ width: this.props.leftChildSize }}\n            >\n              {this.props.leftChild}\n            </div>\n          )}\n          {this.props.rightChild && (\n            <div\n              className={styles.boxIconRight}\n              style={{ width: this.props.rightChildSize }}\n            >\n              {this.props.rightChild}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\nControlInput.propTypes = {\n  id: PropTypes.string,\n  hollow: PropTypes.bool,\n  boxy: PropTypes.bool,\n  type: PropTypes.string,\n  leftChild: PropTypes.element,\n  rightChild: PropTypes.element,\n  isWhite: PropTypes.bool,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n  height: PropTypes.number,\n  background: PropTypes.string,\n  textStyle: PropTypes.shape({\n    fontSize: PropTypes.number\n  })\n};\n\nControlInput.defaultProps = {\n  id: null,\n  height: 40,\n  type: \"text\",\n  textStyle: {\n    fontSize: 14\n  },\n  disabled: false,\n  borderBottom: \"1px solid #d2d2d2\"\n};\n"]},"metadata":{},"sourceType":"module"}